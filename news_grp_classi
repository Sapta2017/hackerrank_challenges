from __future__ import print_function

import logging
import numpy as np
from optparse import OptionParser
import sys
from time import time
import matplotlib.pyplot as plt
import pandas as pd
import os
import string
from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import HashingVectorizer
from sklearn.feature_selection import SelectFromModel
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.linear_model import RidgeClassifier
from sklearn.pipeline import Pipeline
from sklearn.svm import LinearSVC
from sklearn.linear_model import SGDClassifier
from sklearn.linear_model import Perceptron
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import NearestCentroid
from sklearn.ensemble import RandomForestClassifier
from sklearn.utils.extmath import density
from sklearn import metrics
def read_file(folder,filename):
    os.chdir(folder)
    return pd.read_table(filename)
raw_train_data=read_file('..\EBA','ml_gl_3000_Train.txt')
raw_test_data=read_file('..\EBA','ml_gl_3000_Test.txt')
train_data=raw_train_data
train_data['Train_Text']=train_data['Train_Text'].str.replace(r"[-/.*0-9]"," ")
print (train_data)
test_data=raw_test_data
test_data['Test_Text']=test_data['Test_Text'].str.replace(r"[-/.*0-9]"," ")
print (test_data)
y_train=train_data.Train_GL
y_test=test_data.Test_GL
#X_train=train_data.Train_Text
#X_test=test_data.Test_Text
print("Extracting features from the training data using a sparse vectorizer")
t0 = time()
hash_vectorizer = HashingVectorizer(stop_words='english',
                                   n_features=20000)
X_train_hash = hash_vectorizer.transform(train_data.Train_Text)
X_test_hash = hash_vectorizer.transform(test_data.Test_Text)

print("Hash Train: n_samples: %d, n_features: %d" % X_train_hash.shape)
print()
print("Hash Test: n_samples: %d, n_features: %d" % X_test_hash.shape)
print()

tfidf_vectorizer = TfidfVectorizer(sublinear_tf=True, analyzer='word',max_features=17,
                                 stop_words='english')

X_train_tfidf = tfidf_vectorizer.fit_transform(train_data.Train_Text)
X_test_tfidf = tfidf_vectorizer.fit_transform(test_data.Test_Text)

duration = time() - t0
#print("done in %fs at %0.3fMB/s" % (duration, data_train_size_mb / duration))
print("Tfidf Train: n_samples: %d, n_features: %d" % X_train_tfidf.shape)
print()
print("Tfidf Test: n_samples: %d, n_features: %d" % X_test_tfidf.shape)
print()
#clf=RandomForestClassifier(n_estimators=1000)
#clf=Pipeline([
#  ('feature_selection', SelectFromModel(LinearSVC(penalty="l1", dual=False,
#                                                  tol=1e-3))),
#  ('classification', LinearSVC(penalty="l2"))])
#clf=KNeighborsClassifier(n_neighbors=10)
#clf=RidgeClassifier(tol=1e-2, solver="lsqr")
#clf=Perceptron(n_iter=50)
#clf=PassiveAggressiveClassifier(n_iter=50)
#clf=MultinomialNB(alpha=.01)
#clf=BernoulliNB(alpha=.01)
clf=NearestCentroid()
clf.fit(X_train_tfidf, y_train)
pred = clf.predict(X_test_tfidf)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
if hasattr(clf, 'coef_'):
        print("dimensionality: %d" % clf.coef_.shape[1])
        print("density: %f" % density(clf.coef_))
print("classification report:")
print(metrics.classification_report(y_test, pred,
                                            target_names=str(y_train)))

print("confusion matrix:")
print(metrics.confusion_matrix(y_test, pred))
print ()
clf.fit(X_train_hash, y_train)
pred = clf.predict(X_test_hash)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
if hasattr(clf, 'coef_'):
        print("dimensionality: %d" % clf.coef_.shape[1])
        print("density: %f" % density(clf.coef_))
print("classification report:")
print(metrics.classification_report(y_test, pred,
                                            target_names=str(y_train)))

print("confusion matrix:")
print(metrics.confusion_matrix(y_test, pred))
print ()
